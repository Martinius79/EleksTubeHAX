name: EleksTubeHAX generate firmware files

on:
  push:
    branches:
      - main
    paths:
      - 'EleksTubeHAX_pio/**'
  workflow_dispatch:

jobs:
  build-firmware:
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      BUILD_NUMBER: ${{ github.run_number }}
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.platformio/.cache
        key: ${{ runner.os }}-pio
      
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Create _USER_DEFINES.h file
      run: |
        echo "Copy _USER_DEFINES - empty.h to _USER_DEFINES.h"
        cp "./EleksTubeHAX_pio/src/_USER_DEFINES - empty.h" "./EleksTubeHAX_pio/src/_USER_DEFINES.h"

    - name: Update FIRMWARE_VERSION in GLOBAL_DEFINES.h
      run: |
        echo "Updating BUILDVER in platformio.ini"
        echo "BUILD_NUMBER=$BUILD_NUMBER"
        sed -E -i "s/(-D[[:space:]]*BUILDVER[[:space:]]*=[[:space:]]*[0-9]+\.[0-9]+\.)([0-9]+)/\1${BUILD_NUMBER}/" "./EleksTubeHAX_pio/platformio.ini"
        # Debug output
        echo "Modified platformio.ini content:"
        cat "./EleksTubeHAX_pio/platformio.ini"

    - name: Install PlatformIO Core
      run: pip install --upgrade platformio

    - name: Install esptool
      run: pip install --upgrade esptool
    
    - name: Uncomment CREATE_FIRMWAREFILE in platformio.ini
      run: |
        echo "Uncomment CREATE_FIRMWAREFILE in platformio.ini!"
        sed -i 's/;\s*-D\s*CREATE_FIRMWAREFILE/-D CREATE_FIRMWAREFILE/' "./EleksTubeHAX_pio/platformio.ini"
        # Debug output
        echo "Modified platformio.ini content:"
        cat "./EleksTubeHAX_pio/platformio.ini"

    - name: Build PlatformIO Project for original EleksTube IPS clocks with 4MB flash.
      run: pio run --environment EleksTube_4MB
      working-directory: ./EleksTubeHAX_pio

    - name: Build PlatformIO Project for original EleksTube clock Gen2.1 (EleksTube IPS Classic Edition/Pro/PR1/PR2, ESP32 Pico D4 Chip).
      run: pio run --environment EleksTube_Gen2
      working-directory: ./EleksTubeHAX_pio

    - name: Build PlatformIO Project for the Si Hai copy of the clock.
      run: pio run --environment SI_HAI
      working-directory: ./EleksTubeHAX_pio

    - name: Build PlatformIO Project for the NovelLife clocks.
      run: pio run --environment NovelLife
      working-directory: ./EleksTubeHAX_pio

    - name: Build PlatformIO Project for the PunkCyber / RGB Glow tube / PCBway clocks.
      run: pio run --environment PunkCyber
      working-directory: ./EleksTubeHAX_pio

    - name: Build PlatformIO Project for all clocks with 8MB flash on PCB (like the IPSTube model H401 and H402).
      run: pio run --environment IPSTube_8MB
      working-directory: ./EleksTubeHAX_pio

    - name: Collect firmware bins (flatten)
      run: |
        set -euo pipefail
        mkdir -p _artifact
        shopt -s nullglob
        # Copy each FW_*.bin to a flat staging dir.
        for f in EleksTubeHAX_pio/.pio/build/*/FW_*.bin; do
          env="$(basename "$(dirname "$f")")"
          base="$(basename "$f")"
          cp "$f" "_artifact/${base}"
        done

    - name: Upload artifact (flat)
      uses: actions/upload-artifact@v4
      with:
        name: all-firmware
        # Upload the files, not the directory, so they're at the artifact root.
        path: _artifact/*.bin
        if-no-files-found: error
