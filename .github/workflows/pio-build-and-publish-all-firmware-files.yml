name: EleksTubeHAX generate firmware files

on:
  push:
    branches:
      - main
    paths:
      - 'EleksTubeHAX_pio/**'
  workflow_dispatch:

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.set_version.outputs.VERSION }}
      ENV_MATRIX: ${{ steps.discover_envs.outputs.ENV_MATRIX }}
    steps:
      - name: Checkout repository (needed to parse platformio.ini)
        uses: actions/checkout@v4
      - name: Set version number
        id: set_version
        run: |
          MAJOR_VERSION=1
          MINOR_VERSION=0
          BUILD_NUMBER=${{ github.run_number }}
          VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_NUMBER}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Discover PlatformIO environments
        id: discover_envs
        run: |
          echo "Parsing PlatformIO environments from platformio.ini"
          python3 - <<'EOF'
            import re, json, pathlib, os
            ini_path = pathlib.Path('EleksTubeHAX_pio') / 'platformio.ini'
            env_names = []
            pattern = re.compile(r'^\[env:([^\]]+)\]')
            with ini_path.open(encoding='utf-8') as f:
              for line in f:
                m = pattern.match(line.strip())
                if m:
                  env_names.append(m.group(1))
            if not env_names:
              raise SystemExit('No [env:<name>] sections found in platformio.ini')
            print('Discovered environments:', env_names)
            json_list = json.dumps(env_names)
            with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as gh:
              gh.write(f"ENV_MATRIX={json_list}\n")
            EOF
          echo "Discovered environments JSON will be available as output."

  build-firmware:
    needs: set-version
    strategy:
      matrix:
        envName: ${{ fromJson(needs.set-version.outputs.ENV_MATRIX) }}
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.set-version.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.platformio/.cache
        key: ${{ runner.os }}-pio
      
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Update FIRMWARE_VERSION in GLOBAL_DEFINES.h
      run: |
        echo "Updating FIRMWARE_VERSION in GLOBAL_DEFINES.h"
        echo "Version: $VERSION"
        sed -i "s|^\(#define FIRMWARE_VERSION\s*\"\)\([^\"\n]*\)\"|\1V$VERSION - \2\"|" "./EleksTubeHAX_pio/src/GLOBAL_DEFINES.h"
        echo "Modified FIRMWARE_VERSION:"
        grep '^#define FIRMWARE_VERSION' "./EleksTubeHAX_pio/src/GLOBAL_DEFINES.h"

    - name: Install PlatformIO Core
      run: pip install --upgrade platformio
    
    - name: Uncomment CREATE_FIRMWAREFILE in platformio.ini
      run: |
        echo "Uncomment CREATE_FIRMWAREFILE in platformio.ini!"
        sed -i 's/; -D CREATE_FIRMWAREFILE/-D CREATE_FIRMWAREFILE/' "./EleksTubeHAX_pio/platformio.ini"
        # Debug output
        echo "Modified platformio.ini content:"
        cat "./EleksTubeHAX_pio/platformio.ini"

    - name: Build PlatformIO environment
      run: pio run --environment ${{ matrix.envName }}
      working-directory: ./EleksTubeHAX_pio

    - name: Rename firmware file
      run: |
        set -e
        ENV_NAME="${{ matrix.envName }}"
        VERSION="${{ env.VERSION }}"
        BUILD_DIR="EleksTubeHAX_pio/.pio/build/${ENV_NAME}"
        echo "Searching for combined firmware in $BUILD_DIR"
        ls -1 "$BUILD_DIR" || true
        cd "$BUILD_DIR"
        FILE=$(ls *_combined.bin 2>/dev/null | head -n1 || true)
        if [ -z "$FILE" ]; then
          echo "No *_combined.bin file found! Listing contents:" && ls -al
          exit 1
        fi
        case "$ENV_NAME" in
          EleksTubeGen1)   TARGET="FW_Elekstube_HAX_${VERSION}_original.bin" ;;
          EleksTubeGen2)   TARGET="FW_Elekstube_HAX_${VERSION}_Gen2-1.bin" ;;
          SI_HAI)          TARGET="FW_SI_HAI_CLOCK_HAX_${VERSION}.bin" ;;
          PunkCyber)       TARGET="FW_PunkCyber_Glow_PCBway_HAX_${VERSION}.bin" ;;
          IPSTUBE)         TARGET="FW_IPSTUBE_HAX_${VERSION}.bin" ;;
          *)               TARGET="FW_${ENV_NAME}_HAX_${VERSION}.bin" ;;
        esac
        echo "Renaming $FILE -> $TARGET"
        mv "$FILE" "$TARGET"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ matrix.envName }}
        path: |
          EleksTubeHAX_pio/.pio/build/${{ matrix.envName }}/FW_*.bin
        if-no-files-found: error

  combine-artifacts:
    needs: [set-version, build-firmware]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.set-version.outputs.VERSION }}
    steps:
      - name: Check VERSION
        run: |        
          echo "VERSION=$VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-firmware
          pattern: firmware-*
          merge-multiple: true

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: all-firmware-v${{ env.VERSION }}
          path: all-firmware/**/*.bin
          if-no-files-found: error