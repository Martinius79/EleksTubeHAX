name: Create each PlatformIO EleksTubeHAX environment build on multiple OSes.

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write # Required to list/delete caches during pruning

env:
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}
  CI: true
  GH_PROMPT_DISABLED: "1"
  GH_PAGER: cat
  GH_NO_UPDATE_NOTIFIER: "1"

jobs:
  discover-envs:
    name: Discover PlatformIO environments.
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    name: Build ${{ matrix.env }} on ${{ matrix.os }}.
    runs-on: ${{ matrix.os }}

    needs: discover-envs

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, toolchain on the default runner image, default generator>
      # 2. <Linux, Release, toolchain on the default runner image, default generator>

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:        
        # os: [ubuntu-latest] # For local testing: act can‚Äôt run runs-on: windows-latest (or macos-latest)
        os: [ubuntu-latest, windows-latest]
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'



      - name: Create PlatformIO venv and esptool.exe stub.
        run: |
          python -m venv "$HOME/.platformio/penv"
          PENV_SCRIPTS="$HOME/.platformio/penv/Scripts"
          PYTHON_EXE="$PENV_SCRIPTS/python.exe"
          # Install esptool in venv
          "$PYTHON_EXE" -m pip install --upgrade pip
          "$PYTHON_EXE" -m pip install "esptool==5.1.0"
          # Create esptool.exe stub (Windows only)
          if [ -d "$PENV_SCRIPTS" ]; then
            echo "@echo off\n$PYTHON_EXE -m esptool %*" > "$PENV_SCRIPTS/esptool.cmd"
          fi

      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio intelhex esptool

      - name: Hydrate tool-esptoolpy with pip distribution.
        run: |
          python - <<'PY'
          import os
          import shutil
          from pathlib import Path
          import textwrap
          import esptool

          pkg_dir = Path.home() / ".platformio" / "packages" / "tool-esptoolpy"
          pkg_dir.mkdir(parents=True, exist_ok=True)

          src_dir = Path(esptool.__file__).resolve().parent
          dst_dir = pkg_dir / "esptool"
          if dst_dir.exists():
            shutil.rmtree(dst_dir)
          shutil.copytree(src_dir, dst_dir)

          (pkg_dir / "pyproject.toml").write_text("""
          [build-system]
          requires = ["setuptools>=61"]
          build-backend = "setuptools.build_meta"
          """.strip() + "\n", encoding="utf-8")

          version = os.environ.get("ESPTOOL_VERSION", getattr(esptool, "__version__", "0.0.0"))
          setup_cfg = textwrap.dedent(f"""
          [metadata]
          name = esptool
          version = {version}
          description = PlatformIO hydrated esptool package
          license = GPL-2.0-or-later

          [options]
          packages = find:
          include_package_data = True
          install_requires =
              bitstring!=4.2.0,>=3.1.6
              cryptography>=43.0.0
              pyserial>=3.3
              reedsolo<1.8,>=1.5.3
              PyYAML>=5.1
              intelhex
              rich_click
              click<9
          python_requires = >=3.8

          [options.entry_points]
          console_scripts =
              esptool = esptool.__main__:main
              esptool.py = esptool.__main__:main
          """).strip() + "\n"
          (pkg_dir / "setup.cfg").write_text(setup_cfg, encoding="utf-8")
          PY

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Build ${{ matrix.env }} environment.
        run: pio run --environment "${{ matrix.env }}" --verbose
