name: Create each PlatformIO EleksTubeHAX environment build on multiple OSes.

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write # Required to list/delete caches during pruning

env:
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}
  CI: true
  GH_PROMPT_DISABLED: "1"
  GH_PAGER: cat
  GH_NO_UPDATE_NOTIFIER: "1"

jobs:
  discover-envs:
    name: Discover PlatformIO environments.
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    name: Build ${{ matrix.env }} on ${{ matrix.os }}.
    runs-on: ${{ matrix.os }}

    needs: discover-envs

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, toolchain on the default runner image, default generator>
      # 2. <Linux, Release, toolchain on the default runner image, default generator>

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:        
        # os: [ubuntu-latest] # For local testing: act can‚Äôt run runs-on: windows-latest (or macos-latest)
        os: [ubuntu-latest, windows-latest]
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'


      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio intelhex esptool


      - name: Hydrate tool-esptoolpy with pip distribution
        run: |
            python - <<'PY'
            import os
            import shutil
            from pathlib import Path
            import textwrap
            import esptool

            print("[HYDRATE] Starting hydration of tool-esptoolpy...")
            pkg_dir = Path.home() / ".platformio" / "packages" / "tool-esptoolpy"
            print(f"[HYDRATE] Target package dir: {pkg_dir}")
            pkg_dir.mkdir(parents=True, exist_ok=True)

            src_dir = Path(esptool.__file__).resolve().parent
            print(f"[HYDRATE] Source esptool module dir: {src_dir}")
            print(f"[HYDRATE] Files in source dir:")
            for f in src_dir.iterdir():
              print(f"  - {f}")

            dst_dir = pkg_dir / "esptool"
            if dst_dir.exists():
              print(f"[HYDRATE] Removing existing destination dir: {dst_dir}")
              shutil.rmtree(dst_dir)
            print(f"[HYDRATE] Copying esptool module to: {dst_dir}")
            shutil.copytree(src_dir, dst_dir)

            print(f"[HYDRATE] Writing pyproject.toml to: {pkg_dir / 'pyproject.toml'}")
            (pkg_dir / "pyproject.toml").write_text("""
            [build-system]
            requires = ["setuptools>=61"]
            build-backend = "setuptools.build_meta"
            """.strip() + "\n", encoding="utf-8")

            version = os.environ.get("ESPTOOL_VERSION", getattr(esptool, "__version__", "0.0.0"))
            print(f"[HYDRATE] Detected esptool version: {version}")
            setup_cfg = textwrap.dedent(f"""
            [metadata]
            name = esptool
            version = {version}
            description = PlatformIO hydrated esptool package
            license = GPL-2.0-or-later

            [options]
            packages = find:
            include_package_data = True
            install_requires =
              bitstring!=4.2.0,>=3.1.6
              cryptography>=43.0.0
              pyserial>=3.3
              reedsolo<1.8,>=1.5.3
              PyYAML>=5.1
              intelhex
              rich_click
              click<9
            python_requires = >=3.8

            [options.entry_points]
            console_scripts =
              esptool = esptool.__main__:main
              esptool.py = esptool.__main__:main
            """).strip() + "\n"
            print(f"[HYDRATE] Writing setup.cfg to: {pkg_dir / 'setup.cfg'}")
            (pkg_dir / "setup.cfg").write_text(setup_cfg, encoding="utf-8")
            print("[HYDRATE] Hydration complete.")
            print("[HYDRATE] Verifying hydrated package contents:")
            for path in sorted(pkg_dir.rglob("*"), key=lambda p: str(p)):
              kind = "dir" if path.is_dir() else "file"
              rel = path.relative_to(pkg_dir)
              print(f"  - {rel} ({kind})")
            print("[HYDRATE] Verification finished.")
            PY

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Build ${{ matrix.env }} environment.
        run: pio run --environment "${{ matrix.env }}" --verbose

      - name: List esptool files on Linux/macOS runners
        if: always() && runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          echo "\n[DEBUG][Linux] Listing files in PlatformIO tool-esptoolpy package:"
          find "$HOME/.platformio/packages/tool-esptoolpy" -print || echo "(PlatformIO package listing failed)"
          echo "\n[DEBUG][Linux] Listing files in Python esptool module directory:"
          module_dir="$(python -c 'import esptool, os; print(os.path.dirname(esptool.__file__))')"
          echo "Module dir: ${module_dir}"
          find "${module_dir}" -print || echo "(Python module listing failed)"

      - name: List esptool files on Windows runners
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "`n[DEBUG][Windows] Listing files in PlatformIO tool-esptoolpy package:" -ForegroundColor Cyan
          $pkgPath = Join-Path $env:USERPROFILE '.platformio\packages\tool-esptoolpy'
          if (Test-Path $pkgPath) {
            Get-ChildItem $pkgPath -Recurse -Force | Sort-Object FullName | ForEach-Object {
              $kind = if ($_.PSIsContainer) { 'dir ' } else { 'file' }
              "{0}`t{1}`t{2}`t{3}" -f $kind, $_.FullName, $_.Length, $_.LastWriteTime
            }
          } else {
            Write-Host "(path missing: $pkgPath)" -ForegroundColor Yellow
          }
          Write-Host "`n[DEBUG][Windows] Listing files in Python esptool module directory:" -ForegroundColor Cyan
          try {
            $moduleDir = python -c "import esptool, os; print(os.path.dirname(esptool.__file__))"
            $moduleDir = $moduleDir.Trim()
            Write-Host "Module dir: $moduleDir"
            if (Test-Path $moduleDir) {
              Get-ChildItem $moduleDir -Recurse -Force | Sort-Object FullName | ForEach-Object {
                $kind = if ($_.PSIsContainer) { 'dir ' } else { 'file' }
                "{0}`t{1}`t{2}`t{3}" -f $kind, $_.FullName, $_.Length, $_.LastWriteTime
              }
            } else {
              Write-Host "(module dir missing: $moduleDir)" -ForegroundColor Yellow
            }
          } catch {
            Write-Host "(python lookup failed: $_)" -ForegroundColor Red
          }
