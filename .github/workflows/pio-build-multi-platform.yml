name: Create each PlatformIO EleksTubeHAX environment build on multiple OSes.

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write # Required to list/delete caches during pruning

env:
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}
  CI: true
  GH_PROMPT_DISABLED: "1"
  GH_PAGER: cat
  GH_NO_UPDATE_NOTIFIER: "1"

jobs:
  discover-envs:
    name: Discover PlatformIO environments.
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    name: Build ${{ matrix.env }} on ${{ matrix.os }}.
    runs-on: ${{ matrix.os }}

    needs: discover-envs

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, toolchain on the default runner image, default generator>
      # 2. <Linux, Release, toolchain on the default runner image, default generator>

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:        
        # os: [ubuntu-latest] # For local testing: act can‚Äôt run runs-on: windows-latest (or macos-latest)
        os: [ubuntu-latest, windows-latest]
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio intelhex esptool

      - name: Pre-install ESP-IDF toolset packages
        shell: bash
        run: |
          set -euo pipefail
          python -m platformio pkg install --global --tool tool-esptoolpy
          python -m platformio pkg install --global --tool tool-esp_install
          python -m platformio pkg install --global --tool tool-idf

      - name: Hydrate tool-esptoolpy metadata from pip distribution
        shell: bash
        run: |
          set -euo pipefail
          python - <<'PY'
          import os
          import textwrap
          from pathlib import Path
          import importlib

          print("[HYDRATE] Importing esptool from pip environment...")
          esptool = importlib.import_module("esptool")
          src_dir = Path(esptool.__file__).resolve().parent
          print(f"[HYDRATE] Source esptool module: {src_dir}")

          pio_pkg_dir = Path.home() / ".platformio" / "packages" / "tool-esptoolpy"
          pio_pkg_dir.mkdir(parents=True, exist_ok=True)
          print(f"[HYDRATE] Target package directory: {pio_pkg_dir}")

          module_dir = pio_pkg_dir / "esptool"
          if not module_dir.exists():
              raise SystemExit(f"Expected esptool module directory at {module_dir}")

          def write_if_changed(path: Path, content: str) -> None:
              if path.exists() and path.read_text(encoding="utf-8") == content:
                  print(f"[HYDRATE] {path.name} already up-to-date")
                  return
              path.write_text(content, encoding="utf-8")
              print(f"[HYDRATE] Wrote {path.name}")

          pyproject = textwrap.dedent("""
              [build-system]
              requires = ["setuptools>=61"]
              build-backend = "setuptools.build_meta"
          """).strip() + "\n"
          write_if_changed(pio_pkg_dir / "pyproject.toml", pyproject)

          version = getattr(esptool, "__version__", os.environ.get("ESPTOOL_VERSION", "0.0.0"))
          setup_cfg = textwrap.dedent(f"""
              [metadata]
              name = esptool
              version = {version}
              description = PlatformIO hydrated esptool package
              license = GPL-2.0-or-later

              [options]
              packages = find:
              include_package_data = True
              install_requires =
                bitstring!=4.2.0,>=3.1.6
                cryptography>=43.0.0
                pyserial>=3.3
                reedsolo<1.8,>=1.5.3
                PyYAML>=5.1
                intelhex
                rich_click
                click<9
              python_requires = >=3.8

              [options.entry_points]
              console_scripts =
                esptool = esptool.__main__:main
                esptool.py = esptool.__main__:main
          """).strip() + "\n"
          write_if_changed(pio_pkg_dir / "setup.cfg", setup_cfg)

          setup_py = textwrap.dedent("""
              from setuptools import setup

              if __name__ == "__main__":
                  setup()
          """).strip() + "\n"
          write_if_changed(pio_pkg_dir / "setup.py", setup_py)

          print("[HYDRATE] Listing hydrated package metadata files:")
          for path in sorted(pio_pkg_dir.glob("setup.*")) + [pio_pkg_dir / "pyproject.toml"]:
              if path.exists():
                  print(f"  - {path.relative_to(pio_pkg_dir)}")

          print("[HYDRATE] Completed hydration step.")
          PY

      - name: Ensure esptool CLI available on Windows runners
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Ensuring esptool CLI is available for PlatformIO build" -ForegroundColor Cyan
          Write-Host "--- PlatformIO core info (for context) ---" -ForegroundColor DarkGray
          pio system info
          $penvPython = Join-Path $env:USERPROFILE '.platformio\penv\Scripts\python.exe'
          if (Test-Path $penvPython) {
            Write-Host "PlatformIO penv detected: $penvPython" -ForegroundColor Green
            $pythonExe = $penvPython
            $scriptsDir = Split-Path $penvPython
          } else {
            Write-Host "PlatformIO penv not found; using runner Python" -ForegroundColor Yellow
            $pythonExe = (Get-Command python).Source
            $scriptsDir = python -c "import sysconfig; print(sysconfig.get_path('scripts'))"
          }
          $scriptsDir = $scriptsDir.Trim()
          if (!(Test-Path $scriptsDir)) {
            Throw "Unable to locate Python Scripts directory: $scriptsDir"
          }
          Write-Host "Installing/refreshing esptool via $pythonExe" -ForegroundColor Cyan
          & $pythonExe -m pip install --upgrade esptool
          $shimDir = Join-Path $scriptsDir 'esptool-shim'
          New-Item -ItemType Directory -Force -Path $shimDir | Out-Null
          $shimPath = Join-Path $shimDir 'esptool.cmd'
          $shimLines = @(
            '@echo off',
            'setlocal enableextensions',
            'set "_SCRIPT_DIR=%~dp0"',
            'set "_PYTHON_EXE=%~dp0..\python.exe"',
            'if not exist "%_PYTHON_EXE%" set "_PYTHON_EXE=%~dp0..\..\python.exe"',
            'if not exist "%_PYTHON_EXE%" (',
            '  echo Failed to locate python.exe for esptool shim>&2',
            '  exit /b 1',
            ')',
            'for %%A in (%*) do (',
            '  if /I "%%~A"=="--version" (',
            '    "%_PYTHON_EXE%" -m esptool version',
            '    exit /b %ERRORLEVEL%',
            '  )',
            ')',
            '"%_PYTHON_EXE%" -m esptool %*',
            'exit /b %ERRORLEVEL%'
          )
          [System.IO.File]::WriteAllLines($shimPath, $shimLines, [System.Text.Encoding]::ASCII)
          Write-Host "Created esptool shim at $shimPath" -ForegroundColor Cyan
          $env:PATH = "$shimDir;$scriptsDir;$env:PATH"
          $shimDir | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          "$scriptsDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Host "Verifying esptool binary via --version (shimmed):" -ForegroundColor Cyan
          esptool --version

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Build ${{ matrix.env }} environment.
        run: pio run --environment "${{ matrix.env }}"
