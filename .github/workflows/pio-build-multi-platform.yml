name: Create each PlatformIO EleksTubeHAX environment build on multiple OSes.

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  actions: write # Required to list/delete caches during pruning

env:
  GH_TOKEN: ${{ github.token }}
  GITHUB_TOKEN: ${{ github.token }}
  CI: true
  GH_PROMPT_DISABLED: "1"
  GH_PAGER: cat
  GH_NO_UPDATE_NOTIFIER: "1"
  PLATFORMIO_USE_SYSTEM_PYTHON: "1"

jobs:
  discover-envs:
    name: Discover PlatformIO environments.
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.find.outputs.envs }}
    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Find [env:*] sections in platformio.ini file.
        id: find
        shell: bash
        run: |
          envs_json="$(
            awk '
              /^\[env:[^]]+\]/ {
                match($0, /^\[env:([^]]+)\]/, m)
                if (m[1] != "") envs[count++] = m[1]
              }
              END {
                printf("[")
                for (i=0; i<count; i++) printf("%s\"%s\"", (i>0?",":""), envs[i])
                printf("]")
              }
            ' platformio.ini
          )"
          echo "envs=${envs_json}" >> "$GITHUB_OUTPUT"
          echo "  üêû Detected PIO environments: ${envs_json}."

  build:
    name: Build ${{ matrix.env }} on ${{ matrix.os }}.
    runs-on: ${{ matrix.os }}

    needs: discover-envs

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 2 configurations:
      # 1. <Windows, Release, toolchain on the default runner image, default generator>
      # 2. <Linux, Release, toolchain on the default runner image, default generator>

      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:        
        # os: [ubuntu-latest] # For local testing: act can‚Äôt run runs-on: windows-latest (or macos-latest)
        os: [ubuntu-latest, windows-latest]
        env: ${{ fromJson(needs.discover-envs.outputs.envs) }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo.
        uses: actions/checkout@v4

      - name: Setup Python.
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Bootstrap PlatformIO virtualenv with pip<24.
        run: |
          python - <<'PY'
          import pathlib
          import subprocess
          import sys

          home = pathlib.Path.home()
          penv = home / ".platformio" / "penv"
          if sys.platform == "win32":
              python_path = penv / "Scripts" / "python.exe"
          else:
              python_path = penv / "bin" / "python"

          if not python_path.exists():
              subprocess.check_call([sys.executable, "-m", "venv", str(penv)])

          subprocess.check_call([str(python_path), "-m", "pip", "install", "--upgrade", "pip<24"])
          PY

      - name: Install PlatformIO + IntelHex and esptool libraries.
        run: |
          python -m pip install --upgrade "pip<24"
          pip install --upgrade platformio intelhex esptool uv

      - name: Export esptool path for PlatformIO.
        run: |
          set -euo pipefail
          ESPTOOL_PATH=$(python - <<'PY'
          import shutil
          path = shutil.which("esptool.py") or shutil.which("esptool")
          if not path:
              raise SystemExit("esptool executable not found in PATH")
          print(path, end="")
          PY
          )
          echo "Using esptool at $ESPTOOL_PATH"
          echo "PLATFORMIO_ESPTOOLPY_PATH=$ESPTOOL_PATH" >> "$GITHUB_ENV"

      - name: Shim esptool --version on Windows.
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $shimDir = Join-Path $env:RUNNER_TEMP "esptool-shim"
          New-Item -ItemType Directory -Force -Path $shimDir | Out-Null

          $pythonExe = Join-Path $env:pythonLocation "python.exe"
          if (-not (Test-Path $pythonExe)) {
            $pythonExe = "python"
          }

          $realEsptool = $env:PLATFORMIO_ESPTOOLPY_PATH
          if (-not $realEsptool) {
            $candidate = Join-Path $env:USERPROFILE ".platformio\packages\tool-esptoolpy\esptool.py"
            if (Test-Path $candidate) {
              $realEsptool = $candidate
            }
          }

          if (-not $realEsptool) {
            throw "Unable to locate the real esptool executable."
          }

          $shimContent = @"
          @echo off
          setlocal ENABLEEXTENSIONS
          set ""PYTHON_EXE=$pythonExe""
          if ""%~1""==""--version"" (
            shift
            ""%PYTHON_EXE%"" -m esptool version %*
            exit /b %ERRORLEVEL%
          )
          set ""REAL_ESPTOOL=$realEsptool""
          if not exist ""%REAL_ESPTOOL%"" (
            echo esptool shim: %REAL_ESPTOOL% not found>&2
            exit /b 1
          )
          for %%I in (""%REAL_ESPTOOL%"") do set ""EXT=%%~xI""
          if /I ""%EXT%""=="".PY"" (
            ""%PYTHON_EXE%"" ""%REAL_ESPTOOL%"" %*
          ) else (
            ""%REAL_ESPTOOL%"" %*
          )
          exit /b %ERRORLEVEL%
          "@

          $shimPath = Join-Path $shimDir "esptool.cmd"
          Set-Content -Path $shimPath -Value $shimContent -Encoding Ascii
          Add-Content -Path $env:GITHUB_PATH -Value $shimDir
          Write-Host "Added esptool shim at $shimPath and exported $shimDir to GITHUB_PATH."

      - name: Initialize PlatformIO core.
        run: platformio system info

      - name: Show pip versions
        run: |
          set -euo pipefail
          echo "System python pip:" 
          python -m pip --version
          if [[ "${RUNNER_OS}" == "Windows" ]]; then
            PENV_PY="$USERPROFILE\\.platformio\\penv\\Scripts\\python.exe"
          else
            PENV_PY="$HOME/.platformio/penv/bin/python"
          fi
          if [[ -f "$PENV_PY" ]]; then
            echo "PlatformIO penv pip:" 
            "$PENV_PY" -m pip --version
          else
            echo "PlatformIO penv python not found (RUNNER_OS=$RUNNER_OS)."
          fi

      - name: Ensure default _USER_DEFINES.h file exists.
        shell: bash
        run: |
          set -euo pipefail
          SRC="include/_USER_DEFINES - empty.h"
          DST="include/_USER_DEFINES.h"
          mkdir -p "$(dirname "$DST")"
          if [[ ! -f "$DST" ]]; then
            if [[ ! -f "$SRC" ]]; then
              echo "  ‚ùå Source file not found: '$SRC'."
              exit 1
            fi
            cp "$SRC" "$DST"
            echo "  üîß Copied: '$SRC' -> '$DST'."
          else
            echo "  ‚ö†Ô∏è Already present: '$DST'."
          fi

      - name: Build ${{ matrix.env }} environment.
        run: pio run --environment "${{ matrix.env }}"
