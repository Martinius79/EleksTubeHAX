; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

; common settings for all environments
[env]

; ───────────────────────────────────────────────────────────────
; === Platform Dependencies ===
; No specific version is defined to always use the latest
; compatible version available. If issues arise due to updates,
; a specific version can be set like this:
; for original PlatformIO platform module:
; platform = espressif32 @ ^6.12
; However, this is not required by default.
; ───────────────────────────────────────────────────────────────
platform = espressif32

; ───────────────────────────────────────────────────────────────
; === Framework Dependencies ===
; No specific version is defined to always use the latest
; compatible version available. If issues arise due to updates,
; a specific version can be set by defining a platform package:
; for original PlatformIO platform_packages module:
; platform_packages = platformio/framework-arduinoespressif32 @ 3.20017.241212+sha.dcc1105b
; However, this is not required by default.
; ───────────────────────────────────────────────────────────────
framework = arduino
upload_speed = 921600
monitor_speed = 115200

; ───────────────────────────────────────────────────────────────
; === Library Dependencies ===
; No specific versions are defined to always use the latest
; compatible versions available. If issues arise due to updates,
; a specific version can be set like this:
; lib_deps =
;     bblanchon/ArduinoJson @ ^7.4.2
; However, this is not required by default.
; ───────────────────────────────────────────────────────────────
lib_deps = 
	adafruit/Adafruit NeoPixel
	paulstoffregen/Time
	bodmer/TFT_eSPI
	knolleary/PubSubClient
	bblanchon/ArduinoJson
	makuna/RTC
	adafruit/RTClib

	; ───────────────────────────────────────────────────────────────
	; === Tested and working with following versions. If you have issues, revert to library versions listed below. ===
	; adafruit/Adafruit NeoPixel @ 1.15.1
	; paulstoffregen/Time @ 1.6.1
	; bodmer/TFT_eSPI @ 2.5.43
	; knolleary/PubSubClient @ 2.8.0
	; bblanchon/ArduinoJson @ 7.4.2
	; makuna/RTC @ 2.5.0
	; adafruit/RTClib @ ^2.1.4
	; ───────────────────────────────────────────────────────────────


build_flags =
	-D CORE_DEBUG_LEVEL=5	; Set to 0 for no debug; saves flash memory; Set to 5 for full debug
	; -D CREATE_FIRMWAREFILE	; "activate" the extra_script script_build_fs_and_merge.py
board_build.filesystem = spiffs

extra_scripts =
	; copy configuration files into TFT_eSPI library folder
	script_configure_tft_lib.py
	; build the filesystem image and merge it with the other firmware files to one combinded binary with the name of the defined hardware in name
	script_build_fs_and_merge.py


check_flags =              ; https://github.com/danmar/cppcheck/blob/main/man/manual.md
    --enable=all
    --suppress=unusedFunction
    ; --suppressions-list=<file>


; PIO environment for "Original" EleksTube Gen1 clocks with 4MB flash on PCB!
[env:EleksTubeGen1]
board = esp32dev
build_flags =
	${env.build_flags}
	-D HARDWARE_Elekstube_CLOCK
lib_deps =
	${env.lib_deps}
	; add env specific libraries here
board_build.partitions = partition_noOta_1Mapp_3Mspiffs.csv ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html

; PIO environment for EleksTube Gen2 clocks (Gen2 of the Original EleksTube clocks - IPS Classic Edition, PR1, PR2, IPS Pro) with 4MB flash on PCB!
[env:EleksTubeGen2]
board = esp32dev
build_flags =
	${env.build_flags}
	-D HARDWARE_Elekstube_CLOCK_Gen2
lib_deps =
	${env.lib_deps}
	; add env specific libraries here
board_build.partitions = partition_noOta_1Mapp_3Mspiffs.csv ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html

; PIO environment for SI HAI clocks (Elekstube Gen1 clone) with 4MB flash on PCB!
[env:SI_HAI]
board = esp32dev
build_flags =
	${env.build_flags}
	-D HARDWARE_SI_HAI_CLOCK
lib_deps =
	${env.lib_deps}
	; add env specific libraries here
board_build.partitions = partition_noOta_1Mapp_3Mspiffs.csv ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html

; PIO environment for Xunfeng clock - ESP32-S2 Wroom based and 4MB flash on PCB!
[env:Xunfeng]
board = esp32devS2
lib_deps =
	${env.lib_deps}
build_flags =
	${env.build_flags}
	-D HARDWARE_Xunfeng_CLOCK
	; add env specific libraries here
board_build.partitions = partition_noOta_1Mapp_3Mspiffs.csv ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html

; PIO environment for NovelLife SE clock (Not a direct clone, has gesture sensor, buzzer and microphone) with 4MB flash on PCB!
[env:NovelLife_SE]
board = esp32dev
build_flags =
	${env.build_flags}
	-D HARDWARE_NovelLife_SE_CLOCK
lib_deps =
	${env.lib_deps}
	; add env specific libraries here
board_build.partitions = partition_noOta_1Mapp_3Mspiffs.csv ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html

; PIO environment for PunkCyber clocks (EleksTube Gen1 clone) with 4MB flash on PCB!
[env:PunkCyber]
board = esp32dev
build_flags =
	${env.build_flags}
	-D HARDWARE_PunkCyber_CLOCK
lib_deps =
	${env.lib_deps}
	; add env specific libraries here
board_build.partitions = partition_noOta_1Mapp_3Mspiffs.csv ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html

; PIO environment for IPSTUBE clocks (Not direct clones, Models are H401 and H402) with 8MB flash on PCB!
[env:IPSTUBE]
board = esp32dev8MB
build_flags =
	${env.build_flags}
	-D HARDWARE_IPSTUBE_CLOCK
lib_deps =
	${env.lib_deps}
	; add env specific libraries here
board_build.partitions = partition_noOta_1Mapp_7Mspiffs.csv ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html
